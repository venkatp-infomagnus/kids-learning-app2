name: Build and Deploy to IIS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allows manual triggering

jobs:
  build-and-deploy:
    runs-on: windows-latest  # Using Windows runner for IIS deployment
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm test || true  # Continue even if tests fail (update this if you add real tests)
      
    - name: Create web.config
      run: |
        $webConfigContent = @"
        <?xml version="1.0" encoding="UTF-8"?>
        <configuration>
          <system.webServer>
            <handlers>
              <add name="iisnode" path="app.js" verb="*" modules="iisnode" />
            </handlers>
            <rewrite>
              <rules>
                <rule name="nodejs">
                  <match url="(.*)"/>
                  <conditions>
                    <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true"/>
                  </conditions>
                  <action type="Rewrite" url="app.js"/>
                </rule>
              </rules>
            </rewrite>
            <iisnode watchedFiles="*.js;node_modules\*;views\*.ejs;routes\*.js" node_env="production" />
          </system.webServer>
        </configuration>
        "@
        Set-Content -Path web.config -Value $webConfigContent
      shell: powershell
      
    - name: Package application
      run: |
        Compress-Archive -Path .\* -DestinationPath app.zip -Force
      shell: powershell

    - name: Check Web Deploy installation
      run: |
        # Check if Web Deploy is installed on the remote server
        $session = New-PSSession -ComputerName "49.205.242.221" -Credential $credentials
        Invoke-Command -Session $session -ScriptBlock {
          if (Test-Path "C:\Program Files\IIS\Microsoft Web Deploy V3\msdeploy.exe") {
            Write-Host "Web Deploy is installed"
            $true
          } else {
            Write-Host "Web Deploy is not installed"
            # Install Web Deploy if not already installed (optional)
            choco install webdeploy -y
          }
        }
        Remove-PSSession $session
      shell: powershell

    - name: Deploy to IIS
      run: |
        # Install Web Deploy if not already installed (optional)
        # choco install webdeploy -y
        
        # Define paths
        $iisPath = "\\49.205.242.221\\C$\\inetpub\\wwwroot\KidsApp"
        $backupPath = "C:\inetpub\wwwroot\KidsApp_Backup_$(Get-Date -Format 'yyyyMMdd_HHmmss')"
        
        # Create backup if site exists
        if (Test-Path $iisPath) {
          Write-Host "Creating backup of existing application"
          Copy-Item -Path $iisPath -Destination $backupPath -Recurse -Force
        } else {
          Write-Host "Creating new application directory"
          New-Item -Path $iisPath -ItemType Directory -Force
        }
        
        # Extract app to the IIS directory
        Write-Host "Extracting new application files"
        Expand-Archive -Path app.zip -DestinationPath $iisPath -Force
        
        # Ensure IIS has the correct permissions
        Write-Host "Setting IIS permissions"
        $acl = Get-Acl $iisPath
        $accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule("IIS_IUSRS", "FullControl", "ContainerInherit,ObjectInherit", "None", "Allow")
        $acl.SetAccessRule($accessRule)
        Set-Acl $iisPath $acl
        
        # Check if the site already exists in IIS
        Import-Module WebAdministration
        if (!(Get-Website -Name "KidsApp")) {
          Write-Host "Creating new IIS website"
          New-Website -Name "KidsApp" -PhysicalPath $iisPath -Port 8080 -Force
        } else {
          Write-Host "Website already exists, updating physical path"
          Set-ItemProperty "IIS:\Sites\KidsApp" -Name "physicalPath" -Value $iisPath
        }
        
        # Install Node.js dependencies if needed
        Set-Location $iisPath
        npm install --production
        
        # Restart the site to apply changes
        Write-Host "Restarting IIS website"
        Stop-Website -Name "KidsApp"
        Start-Website -Name "KidsApp"
        
        Write-Host "Deployment completed successfully"
      shell: powershell